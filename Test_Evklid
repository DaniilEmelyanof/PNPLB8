package Lab_8;

import org.junit.Test;
import java.util.Random;
import static org.junit.Assert.*;
 
public class Test_Evklid
{

    Evklid_algoritm_for_arrays evklid = new Evklid_algoritm_for_arrays();

    private int [] arr = new int[100000000];
    private int[] generate (int N)
    {
        Random rand = new Random ();
        for (int i = 0; i < N; i++)
            arr[i] = Math.abs(rand.nextInt(100));
        return arr;
    }
    private void check(int number)
    {

        int answer = 9999999;
        for (int i =0; i< arr.length; i++)
            if (answer < arr[i])
                answer = arr[i];
        assertTrue(answer >= number);
    }

    @Test
    public void stress_test_one()
    {
        int array[] = generate(1000);
        check(evklid.algorithm(array));
    }

    @Test
    public void stress_test_two()
    {
        int[] array = generate(100000);
        check(evklid.algorithm(array));
    }

    @Test
    public void stress_test_three()
    {
        int [] array = generate(10000000);
        check(evklid.algorithm(array));
    }

    @Test
    public void very_simple_Test()
    {
        int [] array = new int[] {1,2,3};
        int expected = 1;
        assertEquals(expected, evklid.algorithm(array));
    }

    @Test
    public void simple_Test_with_Zero()
    {
        int array [] = new int[]{0, 42};
        int expected = 42;
        assertEquals(expected, evklid.algorithm(array));
    }

    @Test
    public void test_with_negative_numbers()
    {
        int array[] = new int[]{-5, 15, -100, 200};
        int expected = 5;
        assertEquals(expected, evklid.algorithm(array));
    }
}
